<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>沙漠飞车：迈巴赫逃生之旅</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(to bottom, #1a2a6c, #b21f1f, #fdbb2d);
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            color: white;
        }
        
        #game-container {
            position: relative;
            width: 100%;
            max-width: 500px;
            height: 80vh;
            background: #8B4513;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.7);
            overflow: hidden;
        }
        
        #game-header {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            z-index: 10;
            background: rgba(0, 0, 0, 0.5);
        }
        
        #timer {
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 0 5px #000;
        }
        
        #score {
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 0 5px #000;
        }
        
        #game-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        #start-screen, #game-over-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(0, 0, 0, 0.8);
            z-index: 20;
            text-align: center;
            padding: 20px;
        }
        
        #game-over-screen {
            display: none;
        }
        
        h1 {
            font-size: 36px;
            margin-bottom: 20px;
            color: #fdbb2d;
            text-shadow: 0 0 10px #b21f1f;
        }
        
        h2 {
            font-size: 32px;
            margin-bottom: 20px;
            color: #fdbb2d;
        }
        
        p {
            font-size: 18px;
            margin-bottom: 20px;
            max-width: 80%;
            line-height: 1.6;
        }
        
        .character-description {
            display: flex;
            justify-content: space-around;
            width: 100%;
            margin: 20px 0;
        }
        
        .character {
            text-align: center;
            padding: 10px;
            background: rgba(139, 69, 19, 0.5);
            border-radius: 10px;
            width: 45%;
        }
        
        .character h3 {
            margin-bottom: 10px;
            color: #fdbb2d;
        }
        
        button {
            padding: 15px 40px;
            font-size: 20px;
            background: #fdbb2d;
            border: none;
            border-radius: 50px;
            color: #8B4513;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        button:hover {
            background: #ffcc44;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.4);
        }
        
        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            gap: 10px;
        }
        
        .key {
            width: 50px;
            height: 50px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-weight: bold;
            font-size: 24px;
        }
        
        .instructions {
            margin-top: 30px;
            background: rgba(139, 69, 19, 0.5);
            padding: 15px;
            border-radius: 10px;
            width: 80%;
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            color: #fdbb2d;
        }
        
        .instructions ul {
            text-align: left;
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 8px;
        }
        
        @media (max-width: 500px) {
            h1 {
                font-size: 28px;
            }
            
            h2 {
                font-size: 24px;
            }
            
            #timer, #score {
                font-size: 18px;
            }
            
            .character {
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="game-header">
            <div id="timer">时间: 0秒</div>
            <div id="score">速度: 0</div>
        </div>
        
        <canvas id="game-canvas"></canvas>
        
        <div id="start-screen">
            <h1>沙漠飞车：迈巴赫逃生之旅</h1>
            <p>驾驶迈巴赫穿越危险的沙漠戈壁，躲避障碍物，尽可能长时间生存！</p>
            
            <div class="character-description">
                <div class="character">
                    <h3>神秘女司机</h3>
                    <p>穿着白色连衣裙，戴着黑色眼罩的年轻女子</p>
                </div>
                <div class="character">
                    <h3>神秘乘客</h3>
                    <p>赤裸上身，小麦色皮肤，白色头发的年轻男子</p>
                </div>
            </div>
            
            <div class="instructions">
                <h3>游戏说明</h3>
                <ul>
                    <li>使用左右箭头键或触摸屏幕左右两侧控制车辆移动</li>
                    <li>避开岩石、仙人掌、流沙地和破旧铁轨</li>
                    <li>生存时间越长，速度越快</li>
                    <li>碰撞任何障碍物都会导致游戏结束</li>
                </ul>
            </div>
            
            <button id="start-button">开始游戏</button>
            
            <div class="controls">
                <div class="key">←</div>
                <div class="key">→</div>
            </div>
        </div>
        
        <div id="game-over-screen">
            <h2>游戏结束!</h2>
            <p id="final-time">生存时间: 0秒</p>
            <p id="final-speed">最高速度: 0</p>
            <button id="restart-button">再试一次</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // 获取游戏元素
            const canvas = document.getElementById('game-canvas');
            const ctx = canvas.getContext('2d');
            const timerElement = document.getElementById('timer');
            const scoreElement = document.getElementById('score');
            const startScreen = document.getElementById('start-screen');
            const gameOverScreen = document.getElementById('game-over-screen');
            const finalTimeElement = document.getElementById('final-time');
            const finalSpeedElement = document.getElementById('final-speed');
            const startButton = document.getElementById('start-button');
            const restartButton = document.getElementById('restart-button');
            
            // 设置画布尺寸
            function resizeCanvas() {
                canvas.width = canvas.parentElement.clientWidth;
                canvas.height = canvas.parentElement.clientHeight;
            }
            
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // 游戏变量
            let gameRunning = false;
            let gameTime = 0;
            let gameSpeed = 2;
            let playerX = canvas.width / 2;
            let obstacles = [];
            let animationId;
            let lastTime = 0;
            let obstacleSpawnTimer = 0;
            let touchStartX = 0;
            
            // 车辆属性
            const carWidth = 60;
            const carHeight = 100;
            
            // 角色图像（简化表示）
            function drawDriver() {
                // 女司机（白色连衣裙）
                ctx.fillStyle = '#FFFFFF';
                ctx.beginPath();
                ctx.arc(playerX, canvas.height - 70, 10, 0, Math.PI * 2);
                ctx.fill();
                
                // 眼罩
                ctx.fillStyle = '#000000';
                ctx.fillRect(playerX - 8, canvas.height - 73, 16, 5);
            }
            
            function drawPassenger() {
                // 乘客（小麦色皮肤）
                ctx.fillStyle = '#D2B48C';
                ctx.beginPath();
                ctx.arc(playerX + 20, canvas.height - 70, 10, 0, Math.PI * 2);
                ctx.fill();
                
                // 白色头发
                ctx.fillStyle = '#FFFFFF';
                ctx.beginPath();
                ctx.arc(playerX + 20, canvas.height - 75, 12, 0, Math.PI2);
                ctx.fill();
            }
            
            // 绘制车辆
            function drawCar() {
                // 车辆主体（迈巴赫）
                ctx.fillStyle = '#000000';
                ctx.fillRect(playerX - carWidth/2, canvas.height - carHeight, carWidth, carHeight);
                
                // 车窗
                ctx.fillStyle = '#87CEEB';
                ctx.fillRect(playerX - carWidth/2 + 5, canvas.height - carHeight + 10, carWidth - 10, 30);
                
                // 车轮
                ctx.fillStyle = '#333333';
                ctx.fillRect(playerX - carWidth/2 - 8, canvas.height - 20, 15, 25);
                ctx.fillRect(playerX + carWidth/2 - 7, canvas.height - 20, 15, 25);
                
                // 绘制角色
                drawDriver();
                drawPassenger();
            }
            
            // 障碍物类型
            const obstacleTypes = [
                { name: '岩石', color: '#888888', width: 40, height: 40 },
                { name: '仙人掌', color: '#2E8B57', width: 30, height: 60 },
                { name: '流沙地', color: '#F0E68C', width: 80, height: 20 },
                { name: '破旧铁轨', color: '#A9A9A9', width: 100, height: 10 }
            ];
            
            // 创建障碍物
            function createObstacle() {
                const type = obstacleTypes[Math.floor(Math.random() * obstacleTypes.length)];
                const x = Math.random() * (canvas.width - type.width);
                
                return {
                    x: x,
                    y: -type.height,
                    width: type.width,
                    height: type.height,
                    color: type.color,
                    name: type.name
                };
            }
            
            // 绘制障碍物
            function drawObstacle(obstacle) {
                ctx.fillStyle = obstacle.color;
                ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
                
                // 为仙人掌添加细节
                if (obstacle.name === '仙人掌') {
                    ctx.fillStyle = '#228B22';
                    ctx.fillRect(obstacle.x + 10, obstacle.y - 10, 10, 10);
                    ctx.fillRect(obstacle.x + 20, obstacle.y - 15, 10, 15);
                }
                
                // 为铁轨添加细节
                if (obstacle.name === '破旧铁轨') {
                    ctx.fillStyle = '#555555';
                    for (let i = 0; i < 3; i++) {
                        ctx.fillRect(obstacle.x + 15 + i * 30, obstacle.y, 5, obstacle.height);
                    }
                }
            }
            
            // 绘制沙漠背景
            function drawBackground() {
                // 沙漠地面
                ctx.fillStyle = '#D2691E';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // 沙丘
                ctx.fillStyle = '#CD853F';
                for (let i = 0; i < 5; i++) {
                    const x = (i * canvas.width/4) + (Math.sin(gameTime/100 + i) * 50);
                    ctx.beginPath();
                    ctx.moveTo(x, canvas.height);
                    ctx.bezierCurveTo(
                        x + 100, canvas.height - 50,
                        x + 200, canvas.height - 100,
                        x + 300, canvas.height
                    );
                    ctx.fill();
                }
                
                // 远处山脉
                ctx.fillStyle = '#A0522D';
                for (let i = 0; i < 4; i++) {
                    const x = i * canvas.width/3;
                    const height = 100 + Math.sin(gameTime/200 + i) * 20;
                    ctx.beginPath();
                    ctx.moveTo(x, canvas.height);
                    ctx.lineTo(x + canvas.width/6, canvas.height - height);
                    ctx.lineTo(x + canvas.width/3, canvas.height);
                    ctx.fill();
                }
                
                // 天空
                const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height/2);
                skyGradient.addColorStop(0, '#87CEEB');
                skyGradient.addColorStop(1, '#FFA500');
                ctx.fillStyle = skyGradient;
                ctx.fillRect(0, 0, canvas.width, canvas.height/2);
                
                // 太阳
                ctx.fillStyle = '#FFD700';
                ctx.beginPath();
                ctx.arc(canvas.width - 50, 50, 30, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // 检测碰撞
            function checkCollision(obstacle) {
                const carLeft = playerX - carWidth/2;
                const carRight = playerX + carWidth/2;
                const carTop = canvas.height - carHeight;
                const carBottom = canvas.height;
                
                return !(
                    carRight < obstacle.x ||
                    carLeft > obstacle.x + obstacle.width ||
                    carTop > obstacle.y + obstacle.height ||
                    carBottom < obstacle.y
                );
            }
            
            // 游戏主循环
            function gameLoop(timestamp) {
                if (!gameRunning) return;
                
                const deltaTime = timestamp - lastTime;
                lastTime = timestamp;
                
                // 更新游戏时间
                gameTime += deltaTime / 1000;
                timerElement.textContent = `时间: ${Math.floor(gameTime)}秒`;
                
                // 随着时间增加速度（每10秒增加0.2，最大速度10）
                if (gameTime > 0 && gameTime % 10 < deltaTime/1000) {
                    gameSpeed = Math.min(10, gameSpeed + 0.2);
                    scoreElement.textContent = `速度: ${gameSpeed.toFixed(1)}`;
                }
                
                // 清除画布
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // 绘制背景
                drawBackground();
                
                // 生成新障碍物
                obstacleSpawnTimer += deltaTime;
                if (obstacleSpawnTimer > 1000 / gameSpeed) {
                    obstacles.push(createObstacle());
                    obstacleSpawnTimer = 0;
                }
                
                // 更新和绘制障碍物
                for (let i = obstacles.length - 1; i >= 0; i--) {
                    const obstacle = obstacles[i];
                    
                    // 更新位置
                    obstacle.y += gameSpeed * 2;
                    
                    // 绘制障碍物
                    drawObstacle(obstacle);
                    
                    // 检测碰撞
                    if (checkCollision(obstacle)) {
                        endGame();
                        return;
                    }
                    
                    // 移除超出屏幕的障碍物
                    if (obstacle.y > canvas.height) {
                        obstacles.splice(i, 1);
                    }
                }
                
                // 绘制车辆
                drawCar();
                
                // 继续游戏循环
                animationId = requestAnimationFrame(gameLoop);
            }
            
            // 开始游戏
            function startGame() {
                gameRunning = true;
                gameTime = 0;
                gameSpeed = 2;
                playerX = canvas.width / 2;
                obstacles = [];
                obstacleSpawnTimer = 0;
                
                timerElement.textContent = `时间: 0秒`;
                scoreElement.textContent = `速度: ${gameSpeed.toFixed(1)}`;
                
                startScreen.style.display = 'none';
                gameOverScreen.style.display = 'none';
                
                lastTime = performance.now();
                animationId = requestAnimationFrame(gameLoop);
            }
            
            // 结束游戏
            function endGame() {
                gameRunning = false;
                cancelAnimationFrame(animationId);
                
                finalTimeElement.textContent = `生存时间: ${Math.floor(gameTime)}秒`;
                finalSpeedElement.textContent = `最高速度: ${gameSpeed.toFixed(1)}`;
                gameOverScreen.style.display = 'flex';
            }
            
            // 事件监听
            startButton.addEventListener('click', startGame);
            restartButton.addEventListener('click', startGame);
            
            // 键盘控制
            document.addEventListener('keydown', (e) => {
                if (!gameRunning) return;
                
                if (e.key === 'ArrowLeft' && playerX > carWidth/2) {
                    playerX -= 15;
                } else if (e.key === 'ArrowRight' && playerX < canvas.width - carWidth/2) {
                    playerX += 15;
                }
            });
            
            // 触摸控制
            canvas.addEventListener('touchstart', (e) => {
                if (!gameRunning) return;
                
                touchStartX = e.touches[0].clientX;
                e.preventDefault();
            });
            
            canvas.addEventListener('touchmove', (e) => {
                if (!gameRunning) return;
                
                const touchX = e.touches[0].clientX;
                const diff = touchX - touchStartX;
                
                if (diff > 20 && playerX < canvas.width - carWidth/2) {
                    playerX += 15;
                    touchStartX = touchX;
                } else if (diff < -20 && playerX > carWidth/2) {
                    playerX -= 15;
                    touchStartX = touchX;
                }
                
                e.preventDefault();
            });
            
            // 初始绘制
            drawBackground();
            drawCar();
        });
    </script>
</body>
</html>
